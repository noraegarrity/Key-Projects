# How to use this script:
#
# 1. Make sure you have output files with basic and automatic evaluation metrics generated by run.py).
#
# 2. Install packages: If you haven't already, install the python packages using pip:
#    ```bash
#    pip install -r requirements.txt
#    ```
#    You should see requirements.txt in the same folder as process_summaries.py.
#
# 3. Run the script: Open your terminal or command prompt, navigate to the directory where you saved the process_summaries.py file, and run the script with the following command, replacing <your_folder_path> with the actual path to the folder containing your files:
#    ```bash
#    python process_summaries.py -i <your_folder_path> -o output.csv
#    ```
#    - `-i <your_folder_path>`: Specifies the path to the input folder.
#    - `-o output.csv`: Specifies the name of the output CSV file (defaults to metrics_output.csv). You can change the filename as needed.
#
# 4. Output: After execution, a CSV file (e.g., output.csv) will be generated in the same directory as the script. This file will contain the extracted evaluation metrics from all the files in the specified folder, with each row corresponding to a file.import os

import os
import re
import pandas as pd
import argparse

def extract_metrics_from_file(filepath, filename):
    """
    Extracts evaluation metrics from a single text file.

    Args:
        filepath (str): The full path to the file.
        filename (str): The name of the file.

    Returns:
        dict: A dictionary containing the extracted metrics, with 'Filename' as the key for the filename.
              Returns a dictionary with only 'Filename' if an error occurs during processing.
    """
    metrics = {'Filename': filename}
    try:
        with open(filepath, 'r', encoding='utf-8') as f:
            content = f.read()

            # Extract character and word counts
            original_char_match = re.search(r"Original Chinese Character Count: (\d+)", content)
            summary_word_match = re.search(r"Summary English Word Count: (\d+)", content)
            translation_time_match = re.search(r"Translation Time: ([\d.]+)", content)
            summarization_time_match = re.search(r"Summarization Time: ([\d.]+)", content)
            total_processing_time_match = re.search(r"Total Processing Time: ([\d.]+)", content)

            metrics['Original Chinese Character Count'] = int(original_char_match.group(1)) if original_char_match else None
            metrics['Summary English Word Count'] = int(summary_word_match.group(1)) if summary_word_match else None
            metrics['Translation Time'] = float(translation_time_match.group(1)) if translation_time_match else None
            metrics['Summarization Time'] = float(summarization_time_match.group(1)) if summarization_time_match else None
            metrics['Total Processing Time'] = float(total_processing_time_match.group(1)) if total_processing_time_match else None

            # Extract ROUGE scores
            rouge_1_f1_match = re.search(r"ROUGE-1 F1: ([\d.]+)", content)
            rouge_l_f1_match = re.search(r"ROUGE-L F1: ([\d.]+)", content)

            metrics['ROUGE-1 F1'] = float(rouge_1_f1_match.group(1)) if rouge_1_f1_match else None
            metrics['ROUGE-L F1'] = float(rouge_l_f1_match.group(1)) if rouge_l_f1_match else None

            # Extract BERTScore scores
            bert_precision_match = re.search(r"BERT Precision: ([\d.]+)", content)
            bert_recall_match = re.search(r"BERT Recall: ([\d.]+)", content)
            bert_f1_match = re.search(r"BERT F1: ([\d.]+)", content)

            metrics['BERT Precision'] = float(bert_precision_match.group(1)) if bert_precision_match else None
            metrics['BERT Recall'] = float(bert_recall_match.group(1)) if bert_recall_match else None
            metrics['BERT F1'] = float(bert_f1_match.group(1)) if bert_f1_match else None

            return metrics

    except Exception as e:
        print(f"Error processing file {filepath}: {e}")
        return {'Filename': filename}  # Keep filename even if parsing fails

def process_files_in_folder(folder_path):
    """
    Processes all files in the specified folder to extract evaluation metrics.

    Args:
        folder_path (str): The path to the folder containing the files.

    Returns:
        pandas.DataFrame: A DataFrame containing the extracted metrics from all processed files.
                          Returns an empty DataFrame if no metrics are extracted.
    """
    all_metrics = []
    for filename in os.listdir(folder_path):
        filepath = os.path.join(folder_path, filename)
        if os.path.isfile(filepath):
            metrics = extract_metrics_from_file(filepath, filename)
            if metrics:
                all_metrics.append(metrics)
    return pd.DataFrame(all_metrics)

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Process summary files and extract evaluation metrics.")
    parser.add_argument("-i", "--input_folder", required=True, help="Path to the folder containing the summary files.")
    parser.add_argument("-o", "--output_csv", default="metrics_output.csv", help="Path to save the output CSV file.")

    args = parser.parse_args()
    input_folder = args.input_folder
    output_csv_file = args.output_csv

    if not os.path.isdir(input_folder):
        print(f"Error: Input folder '{input_folder}' does not exist.")
    else:
        df = process_files_in_folder(input_folder)
        if df is not None and not df.empty:
            df.to_csv(output_csv_file, index=False, encoding='utf-8')
            print(f"Metrics successfully extracted and saved to '{output_csv_file}'.")
        else:
            print("No metrics were extracted from the files.")
